// Code generated by protoc-gen-go. DO NOT EDIT.
// source: socket.proto

package socket

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type AuctionId struct {
	AuctionId            string   `protobuf:"bytes,1,opt,name=auctionId,proto3" json:"auctionId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuctionId) Reset()         { *m = AuctionId{} }
func (m *AuctionId) String() string { return proto.CompactTextString(m) }
func (*AuctionId) ProtoMessage()    {}
func (*AuctionId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b39cc5e3943e1cc, []int{0}
}

func (m *AuctionId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuctionId.Unmarshal(m, b)
}
func (m *AuctionId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuctionId.Marshal(b, m, deterministic)
}
func (m *AuctionId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionId.Merge(m, src)
}
func (m *AuctionId) XXX_Size() int {
	return xxx_messageInfo_AuctionId.Size(m)
}
func (m *AuctionId) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionId.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionId proto.InternalMessageInfo

func (m *AuctionId) GetAuctionId() string {
	if m != nil {
		return m.AuctionId
	}
	return ""
}

// The response message containing the greetings
type Err struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Err) Reset()         { *m = Err{} }
func (m *Err) String() string { return proto.CompactTextString(m) }
func (*Err) ProtoMessage()    {}
func (*Err) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b39cc5e3943e1cc, []int{1}
}

func (m *Err) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Err.Unmarshal(m, b)
}
func (m *Err) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Err.Marshal(b, m, deterministic)
}
func (m *Err) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Err.Merge(m, src)
}
func (m *Err) XXX_Size() int {
	return xxx_messageInfo_Err.Size(m)
}
func (m *Err) XXX_DiscardUnknown() {
	xxx_messageInfo_Err.DiscardUnknown(m)
}

var xxx_messageInfo_Err proto.InternalMessageInfo

func (m *Err) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*AuctionId)(nil), "socket.AuctionId")
	proto.RegisterType((*Err)(nil), "socket.Err")
}

func init() { proto.RegisterFile("socket.proto", fileDescriptor_6b39cc5e3943e1cc) }

var fileDescriptor_6b39cc5e3943e1cc = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xce, 0x4f, 0xce,
	0x4e, 0x2d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x34, 0xb9, 0x38,
	0x1d, 0x4b, 0x93, 0x4b, 0x32, 0xf3, 0xf3, 0x3c, 0x53, 0x84, 0x64, 0xb8, 0x38, 0x13, 0x61, 0x1c,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x84, 0x80, 0x92, 0x3c, 0x17, 0xb3, 0x6b, 0x51, 0x91,
	0x90, 0x04, 0x17, 0x7b, 0x6e, 0x6a, 0x71, 0x71, 0x62, 0x7a, 0x2a, 0x54, 0x09, 0x8c, 0x6b, 0x64,
	0xcd, 0xc5, 0x16, 0x0c, 0x36, 0x55, 0xc8, 0x90, 0x8b, 0x37, 0xb4, 0x20, 0x27, 0x3f, 0x31, 0x05,
	0x6a, 0xb6, 0x90, 0xa0, 0x1e, 0xd4, 0x76, 0xb8, 0x65, 0x52, 0xdc, 0x30, 0x21, 0xd7, 0xa2, 0x22,
	0x25, 0x86, 0x24, 0x36, 0xb0, 0xbb, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x35, 0x8f, 0xd1,
	0x3c, 0xa7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SocketClient is the client API for Socket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SocketClient interface {
	// Sends a greeting
	UploadAuction(ctx context.Context, in *AuctionId, opts ...grpc.CallOption) (*Err, error)
}

type socketClient struct {
	cc *grpc.ClientConn
}

func NewSocketClient(cc *grpc.ClientConn) SocketClient {
	return &socketClient{cc}
}

func (c *socketClient) UploadAuction(ctx context.Context, in *AuctionId, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/socket.Socket/UploadAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocketServer is the server API for Socket service.
type SocketServer interface {
	// Sends a greeting
	UploadAuction(context.Context, *AuctionId) (*Err, error)
}

// UnimplementedSocketServer can be embedded to have forward compatible implementations.
type UnimplementedSocketServer struct {
}

func (*UnimplementedSocketServer) UploadAuction(ctx context.Context, req *AuctionId) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAuction not implemented")
}

func RegisterSocketServer(s *grpc.Server, srv SocketServer) {
	s.RegisterService(&_Socket_serviceDesc, srv)
}

func _Socket_UploadAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketServer).UploadAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socket.Socket/UploadAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketServer).UploadAuction(ctx, req.(*AuctionId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Socket_serviceDesc = grpc.ServiceDesc{
	ServiceName: "socket.Socket",
	HandlerType: (*SocketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadAuction",
			Handler:    _Socket_UploadAuction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "socket.proto",
}
